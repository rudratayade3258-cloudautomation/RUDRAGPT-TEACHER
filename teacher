/*
Teacher-site-with-AI-assistant
Updated: Added animations (Framer Motion + Tailwind), complete backend files (server.js, .env.example), seed prompts and practice-question templates, plus example DB schema and deployment notes.

How to use:
 - Frontend: This single-file React component (default export) can be used as a page or embedded component.
 - Backend: Use the provided server.js and .env.example. Deploy on Vercel/Render/Heroku.
 - Seed prompts: Use the given templates to initialise the tutor behavior and generate practice questions.
 - Safety: moderation example included and cheating-policy enforcement.

Contents in this file:
 - React frontend component (with Framer Motion animations)
 - Frontend: helper functions for streaming & UI improvements
 - Backend example: server.js (Express), moderation, prompt templates, DB schema (SQLite example), and a simple scoring function for auto-grading practice questions
 - Seed prompts and practice templates
 - Deployment & security notes
*/

import React, { useState, useEffect, useRef } from 'react';
import { motion } from 'framer-motion';

// ---------- FRONTEND COMPONENT ----------
export default function TeacherSiteWithAI() {
  const [messages, setMessages] = useState([
    { from: 'ai', text: 'Namaste! Main aapka study assistant hoon. Kaisi help chahiye? (JEE/NEET topic, practice question, concept explanation)' }
  ]);
  const [input, setInput] = useState('');
  const [subject, setSubject] = useState('JEE Physics');
  const [loading, setLoading] = useState(false);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  async function sendMessage(e) {
    e?.preventDefault();
    if (!input.trim()) return;
    const userMsg = { from: 'user', text: input };
    setMessages(prev => [...prev, userMsg]);
    setInput('');
    setLoading(true);

    try {
      const res = await fetch(process.env.REACT_APP_AI_API || '/api/ai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: input,
          subject,
          grade: '12',
          goal: 'JEE/NEET',
          student_profile: { name: 'Student', level: 'intermediate' }
        })
      });

      if (!res.ok) {
        const err = await res.text();
        throw new Error(err || 'Server error');
      }

      // Support streaming or normal JSON reply
      const contentType = res.headers.get('content-type') || '';
      if (contentType.includes('text/event-stream')) {
        // streaming SSE (if backend implements)
        const reader = res.body.getReader();
        const decoder = new TextDecoder();
        let aiText = '';
        while (true) {
          const { done, value } = await reader.read();
          if (done) break;
          aiText += decoder.decode(value);
          // optimistic partial update
          setMessages(prev => {
            const last = prev[prev.length - 1];
            if (last && last.from === 'ai' && last.partial) {
              // replace partial
              return [...prev.slice(0, -1), { from: 'ai', text: aiText, partial: true }];
            }
            return [...prev, { from: 'ai', text: aiText, partial: true }];
          });
        }
        // finalize
        setMessages(prev => [...prev.slice(0, -1), { from: 'ai', text: aiText }]);
      } else {
        const data = await res.json();
        const aiMsg = { from: 'ai', text: data.reply || 'Sorry, kuch galat ho gaya.' };
        setMessages(prev => [...prev, aiMsg]);
      }

    } catch (err) {
      console.error(err);
      setMessages(prev => [...prev, { from: 'ai', text: 'Server error. Try again later.' }]);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-white to-gray-50 p-6">
      <motion.div initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.4 }} className="max-w-5xl mx-auto grid md:grid-cols-3 gap-6">
        {/* Left: Teacher card */}
        <motion.div whileHover={{ scale: 1.02 }} className="md:col-span-1 bg-white rounded-2xl p-6 shadow-md">
          <img src="https://via.placeholder.com/400x240?text=Teacher+Photo" alt="teacher" className="w-full rounded-lg mb-4" />
          <h1 className="text-2xl font-bold">Dr. Rohit Sharma</h1>
          <p className="text-sm text-gray-600 mb-3">Experienced JEE/NEET mentor. Physics & Chemistry specialist. 8+ years teaching.</p>
          <div className="space-y-2">
            <div><strong>Subjects:</strong> JEE Physics, NEET Chemistry</div>
            <div><strong>Language:</strong> English / Hindi</div>
            <div><strong>Mode:</strong> Online / Offline</div>
          </div>
          <button className="mt-4 w-full py-2 rounded-xl bg-indigo-600 text-white">Book a Trial Class</button>
        </motion.div>

        {/* Middle: Courses / Info */}
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.1 }} className="md:col-span-1 bg-white rounded-2xl p-6 shadow-md">
          <h2 className="text-xl font-semibold mb-3">Courses</h2>
          <ul className="space-y-3 text-gray-700">
            <li className="p-3 border rounded-lg">
              <strong>JEE Physics (Foundations → Advanced)</strong>
              <div className="text-sm">Mechanics, E&M, Optics, Modern Physics</div>
            </li>
            <li className="p-3 border rounded-lg">
              <strong>NEET Chemistry (Organic + Physical)</strong>
              <div className="text-sm">Reaction mechanisms, Stoichiometry, Thermodynamics</div>
            </li>
          </ul>

          <h3 className="mt-6 font-medium">Why AI helper?</h3>
          <p className="text-sm text-gray-600">Instant doubts resolution, practice questions, step-by-step solutions, concept summaries tailored for JEE/NEET.</p>
        </motion.div>

        {/* Right: Chat UI */}
        <motion.div className="md:col-span-1 bg-white rounded-2xl p-4 shadow-md flex flex-col" initial={{ scale: 0.99 }} animate={{ scale: 1 }} transition={{ duration: 0.3 }}>
          <div className="flex items-center justify-between px-2">
            <div>
              <h3 className="font-semibold">Study Assistant</h3>
              <div className="text-xs text-gray-500">Select subject to get focused help</div>
            </div>
            <select value={subject} onChange={e => setSubject(e.target.value)} className="text-sm border rounded px-2 py-1">
              <option>JEE Physics</option>
              <option>JEE Maths</option>
              <option>NEET Chemistry</option>
              <option>NEET Biology</option>
            </select>
          </div>

          <div className="mt-4 flex-1 overflow-auto p-2" style={{maxHeight: '420px'}}>
            {messages.map((m, i) => (
              <div key={i} className={`mb-3 flex ${m.from === 'ai' ? 'justify-start' : 'justify-end'}`}>
                <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: i * 0.02 }} className={`${m.from === 'ai' ? 'bg-gray-100' : 'bg-indigo-600 text-white'} p-3 rounded-2xl max-w-[80%]`}>
                  <div className="text-sm whitespace-pre-line">{m.text}</div>
                </motion.div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>

          <form onSubmit={sendMessage} className="mt-3">
            <div className="flex gap-2">
              <input value={input} onChange={e => setInput(e.target.value)} placeholder="Ask: explain Doppler effect / give practice qn" className="flex-1 border rounded-xl px-3 py-2" />
              <button disabled={loading} type="submit" className="px-4 py-2 rounded-xl bg-indigo-600 text-white">{loading ? 'Thinking...' : 'Send'}</button>
            </div>
            <div className="text-xs text-gray-400 mt-2">Tip: ask for step-by-step solutions, exam-style questions, or quick summaries.</div>
          </form>
        </motion.div>
      </motion.div>

      {/* Footer / Extra notes */}
      <div className="max-w-5xl mx-auto mt-6 bg-white rounded-2xl p-4 shadow-sm">
        <h4 className="font-semibold">Teacher AI Assistant — Implementation notes</h4>
        <ol className="text-sm text-gray-600 list-decimal pl-5">
          <li>Backend: POST /api/ai expects JSON {"message","subject","grade","goal","student_profile"} and returns {"reply":"..."}.</li>
          <li>Prompting: Use a stable system prompt that enforces exam-style clarity, show steps, ask follow-ups and avoid hallucinations.</li>
          <li>Safety: run messages through a moderation filter and disallow requests that try to cheat on exams (e.g., asking for leaked papers). The backend includes an example moderation step.</li>
        </ol>
      </div>
    </div>
  );
}

// ---------- BACKEND: server.js (example) ----------
/*
Save this as server.js in your backend. Requires node 18+ (native fetch) or install node-fetch.
Run: npm init -y && npm i express better-sqlite3 dotenv express-rate-limit
*/

/*
// server.js
*/

/*
const express = require('express');
const rateLimit = require('express-rate-limit');
const Database = require('better-sqlite3');
const { moderate } = require('./moderation'); // small helper below
const { buildPrompt, SEED_PROMPTS } = require('./prompts');
const fetch = global.fetch || require('node-fetch');
require('dotenv').config();

const app = express();
app.use(express.json());
app.use(rateLimit({ windowMs: 60*1000, max: 120 }));

// Simple SQLite storage example (for transcripts & scoring)
const db = new Database('app.db');
db.exec(`
CREATE TABLE IF NOT EXISTS transcripts (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  student TEXT,
  subject TEXT,
  message TEXT,
  reply TEXT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS practice_results (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  student TEXT,
  question TEXT,
  student_answer TEXT,
  score INTEGER,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
`);

app.post('/api/ai', async (req, res) => {
  try {
    const { message, subject='General', grade='12', goal='JEE/NEET', student_profile={} } = req.body;
    if (!message || message.length > 4000) return res.status(400).json({ error: 'Bad request' });

    // Moderation: block cheating, requests for leaked papers, or disallowed content
    const mod = moderate(message);
    if (!mod.ok) return res.status(403).json({ error: 'Request not allowed by policy' });

    // Build prompt
    const prompt = buildPrompt({ message, subject, grade, goal, student_profile });

    // Example: call OpenAI (replace with your provider)
    const apiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${process.env.OPENAI_API_KEY}` },
      body: JSON.stringify({ model: process.env.OPENAI_MODEL || 'gpt-4o-mini', messages: prompt, max_tokens: 800 })
    });

    if (!apiRes.ok) {
      const txt = await apiRes.text();
      console.error('LLM error', txt);
      return res.status(500).json({ error: 'LLM provider error' });
    }

    const apiJson = await apiRes.json();
    const reply = apiJson?.choices?.[0]?.message?.content || 'Sorry, cannot answer right now.';

    // Save transcript
    const insert = db.prepare('INSERT INTO transcripts (student, subject, message, reply) VALUES (?, ?, ?, ?)');
    insert.run(student_profile.name || 'Unknown', subject, message, reply);

    res.json({ reply });

  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});

// Practice question generator
app.post('/api/generate-practice', async (req, res) => {
  try {
    const { subject='JEE Physics', difficulty='medium' } = req.body;
    // Use seed templates to create a question
    const template = SEED_PROMPTS.practice_question_template;
    const prompt = [{ role: 'system', content: 'You are an exam question generator.' }, { role: 'user', content: `Generate a ${difficulty} ${subject} question and an answer with steps.` }];

    const apiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${process.env.OPENAI_API_KEY}` },
      body: JSON.stringify({ model: process.env.OPENAI_MODEL || 'gpt-4o-mini', messages: prompt, max_tokens: 800 })
    });
    const apiJson = await apiRes.json();
    const output = apiJson?.choices?.[0]?.message?.content || '';
    res.json({ output });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, ()=> console.log(`Server running on ${PORT}`));
*/

// ---------- BACKEND HELPERS: moderation.js ----------
/*
// moderation.js (simple example)
module.exports.moderate = function(text) {
  const low = text.toLowerCase();
  // block if user is asking for leaked papers / exam cheats
  const black = ['leaked', 'papers', 'download paper', 'question paper 2025', 'cheat'];
  for (const w of black) if (low.includes(w)) return { ok: false };
  // otherwise allow
  return { ok: true };
};
*/

// ---------- PROMPTS: prompts.js ----------
/*
// prompts.js
const SEED_PROMPTS = {
  system: `You are an expert JEE/NEET tutor. Answer clearly with steps. If the student asks for practice questions, provide exam-style problems and then solve them step-by-step. Ask clarifying questions when needed. Keep explanations concise (4-10 steps) and show formulas where relevant.`,

  beginner_profile: `Student is in grade 11, base understanding with weak calculus and kinematics. Use simpler language and more examples.`,
  intermediate_profile: `Student is in grade 12, comfortable with basics, needs timed practice and step clarity.`,

  practice_question_template: `Generate a single exam-style question with answer and full step-by-step solution. Provide also a short 1-line hint and the difficulty level (easy/medium/hard). Format:
Question:
Hint:
Difficulty:
Answer and Steps:
`,

  cheating_policy: `If the user requests leaked papers, exam keys, or instructions to cheat, refuse politely and offer practice questions or explanation of topics.`
};

function buildPrompt({ message, subject, grade, goal, student_profile }) {
  const system = SEED_PROMPTS.system;
  const profile = student_profile?.level === 'beginner' ? SEED_PROMPTS.beginner_profile : SEED_PROMPTS.intermediate_profile;
  return [
    { role: 'system', content: system + '
Profile: ' + profile },
    { role: 'user', content: `Subject: ${subject}
Grade: ${grade}
Goal: ${goal}
Request: ${message}` }
  ];
}

module.exports = { SEED_PROMPTS, buildPrompt };
*/

// ---------- PRACTICE TEMPLATE & AUTO-GRADER ----------
/*
Example: auto-grader (very basic)

function simpleAutoGrade(correctAnswer, studentAnswer) {
  // numeric compare if both parseable
  const c = parseFloat(correctAnswer.toString().match(/[-+]?[0-9]*\.?[0-9]+/));
  const s = parseFloat(studentAnswer.toString().match(/[-+]?[0-9]*\.?[0-9]+/));
  if (!isNaN(c) && !isNaN(s)) {
    const diff = Math.abs(c - s);
    if (diff < 1e-2) return 100;
    const perc = Math.max(0, 100 - (diff / Math.abs(c || 1)) * 100);
    return Math.round(perc);
  }
  // otherwise fallback to substring match
  return (studentAnswer.toLowerCase().trim() === correctAnswer.toLowerCase().trim()) ? 100 : 0;
}
*/

// ---------- .env.example ----------
/*
# .env.example
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_MODEL=gpt-4o-mini
PORT=3000
*/

// ---------- DEPLOYMENT NOTES ----------
/*
1) Security
 - Never expose OPENAI_API_KEY in frontend. Always proxy via backend.
 - Add rate-limiting and per-student daily limits.
 - Log minimal PII and add user consent for saving transcripts.

2) Scaling
 - For many users, use a managed DB (Postgres) and caching layer.
 - Consider streaming responses for better UX.

3) Cheating prevention
 - If a user repeatedly asks for leaked papers or exam keys, block and notify admin.
 - Provide a "policy" modal explaining allowed use.

4) Ethics
 - Use moderation to avoid harmful or biased content.
 - Keep student data private and encryption at rest.
*/

// ---------- USAGE / NEXT STEPS ----------
/*
- Frontend: import this component into your React app. Install framer-motion and tailwind.
  npm i framer-motion
- Backend: create server.js, prompts.js, moderation.js as in comments. Install dependencies:
  npm i express dotenv better-sqlite3 express-rate-limit node-fetch
- Start local server: node server.js
- Set REACT_APP_AI_API to your backend route in .env

If you want, I can now:
 - Generate full server.js, moderation.js, prompts.js as separate files in the canvas individually.
 - Create sample seed question set (20 questions) for immediate testing.
 - Convert frontend into multi-file React page (with components).
*/
